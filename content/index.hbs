---
    title:          Documenting a Learning Curve
    short-title:    Home
    type:           home
    id:             id-00
    description:    blog articles - documenting the learning process in webdesign
    sortOrder:      0

---

 <svg style="display:none">
   <symbol id="shape-arrow" viewBox="0 0 20 20">
    <path fill="#3f4664" d="M1.244,7.91h12.578L9.707,3.809l1.969-1.982l7.547,7.533l-7.547,7.533l-1.969-1.969l4.129-4.129H1.244V7.91z"/>
  </symbol>
</svg>

<section class="content content-home"><ul class="publication-list publication-list--articles"><li class="publication-list__item">
    <h3 class="publication-list__item__title"><a href="lazy-loading">Lazy Loading Logos</a></h3>
    <p class="publication-list__item__meta">
    <time datetime="2017-02-19">February 2017</time>
    </p>
    <div class="publication-list__item__content">
      <p><span class="dropcap">T</span>weaking a method for the lazy loading of images made me think the result could be described as progressively enhancing images. By replacing – with javaScript – a small inline SVG data URI with only embedded text <span class="truncate">inside on the src-tag with the url of the external image stored in a data-attribute.</span><a href="lazy-loading/" class="read-more">read rest of article <i class="icon icon-arrow-right">
          <svg class="shape-icon" viewBox="0 0 20 20">
            <use xlink:href="#shape-arrow"></use>
          </svg>
        </i></a>
     </p>
    </div>
    </li><li class="publication-list__item">
    <h3 class="publication-list__item__title"><a href="alpha-transparency-in-hex">Alpha Transparency in Hex</a></h3>
    <p class="publication-list__item__meta">
    <time datetime="2016-05-15">July 2016</time>
    </p>
    <div class="publication-list__item__content">
      <p><span class="dropcap">M</span>aybe early days, but coming to a browser near you some day: alpha transparency in 8 digits hex notation; currently supported in Chrome Canary and Firefox Nightly. Some thoughts here on how and why this could be useful.<a href="alpha-transparency-in-hex" class="read-more">read rest of article <i class="icon icon-arrow-right">
          <svg class="shape-icon" viewBox="0 0 20 20">
            <use xlink:href="#shape-arrow"></use>
          </svg>
        </i></a>
     </p>
    </div>
    </li><li class="publication-list__item">
    <h3 class="publication-list__item__title"><a href="switching-color-modes">Switching Color Modes in SVG</a></h3>
    <p class="publication-list__item__meta">
    <time datetime="2016-05-15">May 2016</time>
    </p>
    <div class="publication-list__item__content">
      <p><span class="dropcap">C</span>ommon practice with showing a serie of logos in an atractive way in a webpage, is to present gray scaled – or monochrome versions, to neutralize the (_potentially clashing_) distracting colors from the images. One way of doing this could be to manipulate the full-color images in  <span class="truncate">photo-editing software and save copies in gray scaled versions. An even quicker way would be to use css– or svg-filters. </span> <a href="switching-color-modes" class="read-more">read rest of article <i class="icon icon-arrow-right">
          <svg class="shape-icon" viewBox="0 0 20 20">
            <use xlink:href="#shape-arrow"></use>
          </svg>
        </i></a>
     </p>
    </div>
    </li><li class="publication-list__item">
    <h3 class="publication-list__item__title"><a href="colorschemes-sublime">Editing Colorschemes for Sublime Text</a></h3>
    <p class="publication-list__item__meta">
    <time datetime="2016-01-11">January 2016</time>
    </p>
    <div class="publication-list__item__content">
      <p><span class="dropcap">S</span>omewhat suprised to see how scarces the available information is, around the interwebs and in the docs, on the subject of creating colorschemes for Sublime Text, for such a popular text-editor. Here are some notes that may <span class="truncate">come handy when doing this yourself. Down at the bottom of this post one will find links to other resources.</span> <a href="colorschemes-sublime" class="read-more">read rest of article <i class="icon icon-arrow-right">
          <svg class="shape-icon" viewBox="0 0 20 20">
            <use xlink:href="#shape-arrow"></use>
          </svg>
        </i></a>
     </p>
    </div>
    </li><li class="publication-list__item">
    <h3 class="publication-list__item__title"><a href="differentiate">Differentiate between Code Examples</a></h3>
    <p class="publication-list__item__meta">
    <time datetime="2015-09-04">September 2015</time>
    </p>
    <div class="publication-list__item__content">
      <p><span class="dropcap">L</span>et’s say one is writing a tutorial with code-examples showing code-snippets from the command-line, _and_ code-snippets from javascript files. One _could_ use **screenshots** from the commandline with, for example, a _dark_ theme <span class="truncate">and javascript snippets in plain text within a `pre`tag syntax-highlighted with a _light_ theme, in order to differentiate between the two in a clear manner.</span> <a href="differentiate" class="read-more">read rest of article <i class="icon icon-arrow-right">
          <svg class="shape-icon" viewBox="0 0 20 20">
            <use xlink:href="#shape-arrow"></use>
          </svg>
        </i></a>
     </p>
    </div>
    </li><li class="publication-list__item">
    <h3 class="publication-list__item__title"><a href="airfan">Airfan is Going to Replace Hamburger</a></h3>
    <p class="publication-list__item__meta">
    <time datetime="2015-05-14">May 2015</time>
    </p>
    <div class="publication-list__item__content">
      <p><span class="dropcap">I</span>n the heyday of strict modernism, when Xerox PARC invented <i>the air vent menu</i>, it was the doctrine of <i>“form follows function”</i> that ruled the art – and design–world. From architecture to applied graphical user interfaces; nothing could escape the modernist inquisition<span class="truncate"> </span> <a href="airfan" class="read-more">read rest of article <i class="icon icon-arrow-right">
          <svg class="shape-icon" viewBox="0 0 20 20">
            <use xlink:href="#shape-arrow"></use>
          </svg>
        </i></a>
     </p>
    </div>
    </li><li class="publication-list__item">
    <h3 class="publication-list__item__title"><a href="colorscheming">Colorscheming for Syntax Highlighting</a></h3>
    <p class="publication-list__item__meta">
    <time datetime="2015-05-14">May 2015</time>
    </p>
    <div class="publication-list__item__content">
      <p><span class="dropcap">F</span>or the last couple of years, whenever I was in the mood for it and found the time, I build colorschemes for syntax highlighting. The idea, that triggered this kind of an academic exercise in colorscheming, <span class="truncate"> was to build a serie of colorschemes that would comprise the whole color gamut, each with it’s own base-color.</span> <a href="colorscheming" class="read-more">read rest of article <i class="icon icon-arrow-right">
          <svg class="shape-icon" viewBox="0 0 20 20">
            <use xlink:href="#shape-arrow"></use>
          </svg>
        </i></a>
     </p>
    </div>
    </li><li class="publication-list__item">
    <h3 class="publication-list__item__title"><a href="assembling">Generate a Static Website</a></h3>
    <p class="publication-list__item__meta">
    <time datetime="2015-02-18">February 2015</time>
    </p>
    <div class="publication-list__item__content">
      <p><span class="dropcap">T</span>he advantages of having a static site-generator integrated in one and the same build-tool _(that you may already be using)_ is huge: [Assemble itself](https://github.com/assemble/assemble) is a Grunt- _(also Yeoman and Node, and soon to be Gulp-)_ plugin. At the same time, Assemble assumes <span class="truncate">very little about _“what it is that you are trying to do”_; making it fun to use _(if you are also the kind of person that tends to want to make things their own &hellip;)_.</span> <a href="assembling" class="read-more">read rest of article <i class="icon icon-arrow-right">
          <svg class="shape-icon" viewBox="0 0 20 20">
            <use xlink:href="#shape-arrow"></use>
          </svg>
        </i></a>
     </p>
    </div>
    </li><li class="publication-list__item">
    <h3 class="publication-list__item__title"><a href="interplay-css-javascript">Interplay between CSS and Javascript <span class="visuallyhidden">on Transitions</span></a></h3>
    <p class="publication-list__item__meta">
    <time datetime="2014-09-23">September 2014</time>
    </p>
    <div class="publication-list__item__content">
      <p>
      <span class="dropcap">A</span>nimating the height of an element with only `CSS` is possible with the `max-height` property, giving the begin value a `max-height` of zero and (_let's say_) the 'hovered' value some high number _“that will always be higher then the real height of the highest animated element”_. <span class="truncate">The outcome of the results can vary quite a bit, depending on the differences between all these values: not satisfying in all scenarios. An alternative way is using `height: 0` in combination with a set value for `padding-bottom`.</span> <a href="interplay-css-javascript" class="read-more">read rest of article <i class="icon icon-arrow-right">
          <svg class="shape-icon" viewBox="0 0 20 20">
            <use xlink:href="#shape-arrow"></use>
          </svg>
        </i></a>
     </p>
    </div>
    </li><li class="publication-list__item">
    <h3 class="publication-list__item__title"><a href="select-menu-hashchange">Site-wide Navigation with Select Menu  <span class="visuallyhidden">using window.onhashchange event</span></a></h3>
    <p class="publication-list__item__meta">
    <time datetime="2014-09-18">September 2014</time>
    </p>
    <div class="publication-list__item__content">
      <p><span class="dropcap">W</span>hen one is already using jQuery, easiest way is to use Ben Alman's great ["hashchange plugin"](https://github.com/cowboy/jquery-hashchange) to get a select-menu to display the right `option` when using a select-menu for site-wide navigation (_maybe for small screens_), <span class="truncate">for otherwise, with each page refresh, the `select` will always jump to the top option when there is no `selected` attribute with a value of `selected` set for the corresponding page on that corresponding option. This is how I would do it, probably could me less verbose, but it works:</span> <a href="select-menu-hashchange" class="read-more">read rest of article <i class="icon icon-arrow-right">
          <svg class="shape-icon" viewBox="0 0 20 20">
            <use xlink:href="#shape-arrow"></use>
          </svg>
        </i></a>
      </p>
    </div>
    </li><li class="publication-list__item">
    <h3 class="publication-list__item__title"><a href="css-shapes-in-multi-column-layout">CSS-Shapes in Multi-Column Layout</a></h3>
    <p class="publication-list__item__meta">
    <time datetime="2014-09-07">September 2014</time>
    </p>
    <div class="publication-list__item__content">
      <p>
      <span class="dropcap">I</span>n order to avoid breaking up a `CSS-Shape` from the surrounding wrapping text to another column, (_&hellip; which is far from pretty_), when using CSS-Shapes (_to make text flow around an image or an object_) within a <strong>multi-column layout</strong>: one can use <span class="truncate">the property `break-inside` with the value `avoid-column` on the wrapping element:</span> <a href="css-shapes-in-multi-column-layout" class="read-more">read rest of article <i class="icon icon-arrow-right">
          <svg class="shape-icon" viewBox="0 0 20 20">
            <use xlink:href="#shape-arrow"></use>
          </svg>
        </i></a></p>
    </div>
    </li>
</ul>
</section>
