---
    title:          Documenting a Learning Curve
    short-title:    Home
    type:           home
    id:             id-00
    description:    blog articles - documenting the learning process in webdesign
    sortOrder:      0

---

<svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
  <symbol id="arrowBroken" viewBox="0 0 35 10">
  <polygon points="35,5 25,0 25,4 20,4 20,6 25,6 25,10 "/>
  <rect x="10" y="4" width="5" height="2"/>
  <rect y="4" width="5" height="2"/>
  </symbol>
</svg>
<section class="content"><ul class="publication-list publication-list--articles"><li class="publication-list__item">
    <h3 class="publication-list__item__title"><a href="airfan">Airfan is Going to Replace Hamburger</a></h3>
    <p class="publication-list__item__meta">
    <time datetime="2015-05-14">May 2015</time>
    </p>
    <div class="publication-list__item__content">
      <p><span class="dropcap">I</span>n the heyday of strict modernism, when Xerox PARC invented <i>the air vent menu</i>, it was the doctrine of <i>“form follows function”</i> that ruled the art – and design–world. From architecture to applied graphical user interfaces; nothing could escape the modernist inquisition<span class="truncate"> </span> <a href="airfan" class="read-more">read rest of article <svg class="shape-icon shape-arrow--broken"><use xlink:href="#arrowBroken"></use></svg></a>
     </p>
    </div>
    </li><li class="publication-list__item">
    <h3 class="publication-list__item__title"><a href="colorscheming">Colorscheming for Syntax Highlighting</a></h3>
    <p class="publication-list__item__meta">
    <time datetime="2015-05-14">May 2015</time>
    </p>
    <div class="publication-list__item__content">
      <p><span class="dropcap">F</span>or the last couple of years, whenever I was in the mood for it and found the time, I build colorschemes for syntax highlighting. The idea, that triggered this kind of an academic exercise in colorscheming, <span class="truncate"> was to build a serie of colorschemes that would comprise the whole color gamut, each with it’s own base-color.</span> <a href="colorscheming" class="read-more">read rest of article <svg class="shape-icon shape-arrow--broken"><use xlink:href="#arrowBroken"></use></svg></a>
     </p>
    </div>
    </li><li class="publication-list__item">
    <h3 class="publication-list__item__title"><a href="assembling">Generate a Static Website</a></h3>
    <p class="publication-list__item__meta">
    <time datetime="2015-02-18">February 2015</time>
    </p>
    <div class="publication-list__item__content">
      <p><span class="dropcap">T</span>he advantages of having a static site-generator integrated in one and the same build-tool _(that you may already be using)_ is huge: [Assemble itself](https://github.com/assemble/assemble) is a Grunt- _(also Yeoman and Node, and soon to be Gulp-)_ plugin. At the same time, Assemble assumes very little about _“what it is that you are trying to do”_; <span class="truncate"> making it fun to use _(if you are also the kind of person that tends to want to make things their own &hellip;)_.</span> <a href="assembling" class="read-more">read rest of article <svg class="shape-icon shape-arrow--broken"><use xlink:href="#arrowBroken"></use></svg></a>
     </p>
    </div>
    </li><li class="publication-list__item">
    <h3 class="publication-list__item__title"><a href="interplay-css-javascript">Interplay between CSS and Javascript <span class="visuallyhidden">on Transitions</span></a></h3>
    <p class="publication-list__item__meta">
    <time datetime="2014-09-23">September 2014</time>
    </p>
    <div class="publication-list__item__content">
      <p>
      <span class="dropcap">A</span>nimating the height of an element with only `CSS` is possible with the `max-height` property, giving the begin value a `max-height` of zero and (_let's say_) the 'hovered' value some high number _“that will always be higher then the real height of the highest animated element”_. The outcome of the <span class="truncate">results can vary quite a bit, depending on the differences between all these values: not satisfying in all scenarios. An alternative way is using `height: 0` in combination with a set value for `padding-bottom`.</span> <a href="interplay-css-javascript" class="read-more">read rest of article <svg class="shape-icon shape-arrow--broken"><use xlink:href="#arrowBroken"></use></svg></a>
     </p>
    </div>
    </li><li class="publication-list__item">
    <h3 class="publication-list__item__title"><a href="select-menu-hashchange">Site-wide Navigation with Select Menu  <span class="visuallyhidden">using window.onhashchange event</span></a></h3>
    <p class="publication-list__item__meta">
    <time datetime="2014-09-18">September 2014</time>
    </p>
    <div class="publication-list__item__content">
      <p><span class="dropcap">W</span>hen one is already using jQuery, easiest way is to use Ben Alman's great ["hashchange plugin"](https://github.com/cowboy/jquery-hashchange) to get a select-menu to display the right `option` when using a select-menu for site-wide navigation (_maybe for small screens_), for otherwise, with each page refresh, the `select` will <span class="truncate">always jump to the top option when there is no `selected` attribute with a value of `selected` set for the corresponding page on that corresponding option. This is how I would do it, probably could me less verbose, but it works:</span> <a href="select-menu-hashchange" class="read-more">read rest of article <svg class="shape-icon shape-arrow--broken"><use xlink:href="#arrowBroken"></use></svg></a>
      </p>
    </div>
    </li><li class="publication-list__item">
    <h3 class="publication-list__item__title"><a href="css-shapes-in-multi-column-layout">CSS-Shapes in Multi-Column Layout</a></h3>
    <p class="publication-list__item__meta">
    <time datetime="2014-09-07">September 2014</time>
    </p>
    <div class="publication-list__item__content">
      <p>
      <span class="dropcap">I</span>n order to avoid breaking up a `CSS-Shape` from the surrounding wrapping text to another column, (_... which is far from pretty_), when using CSS-Shapes (_to make text flow around an image or an object_) within a <strong>multi-column layout</strong>: one can use the property `break-inside` with the value `avoid-column` <span class="truncate">on the wrapping element:</span> <a href="css-shapes-in-multi-column-layout" class="read-more">read rest of article <svg class="shape-icon shape-arrow--broken"><use xlink:href="#arrowBroken"></use></svg></a></p>
    </div>
    </li>
</ul>
</section>
