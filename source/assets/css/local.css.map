{"version":3,"sourceRoot":"","sources":["file:///Users/bram/Sites/github.com/atelierbram/blog/source/_assets/sass/components/_mq.scss","file:///Users/bram/Sites/github.com/atelierbram/blog/source/_assets/sass/components/_mq-show-breakpoints.scss","file:///Users/bram/Sites/github.com/atelierbram/blog/source/_assets/sass/local.scss"],"names":[],"mappings":";AAiKE;EC7JE;IAKM;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;AD8IR;EC7JE;IAKM;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;AD8IR;EC7JE;IAKM;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;AD8IR;EC7JE;IAKM;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;;ACbV;EACE","file":"local.css","sourcesContent":["@use 'sass:math';\n@use 'sass:map';\n@use 'sass:list';\n\n$breakpoints: (\n  mobile:  320px,\n  tablet:  640px,\n  desktop: 980px,\n  wide:    1300px\n) !default;\n\n$bp-mobile:  320px;\n$bp-tablet:  640px;\n$bp-desktop: 980px;\n$bp-wide:    1300px;\n\n$show-breakpoints: (mobile, tablet, desktop, wide);\n///   @import 'path/to/mq';\n///\n/// @type map\n// $mq-show-breakpoints: () !default;\n\n/// Customize the media type (e.g. `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$media-type: all !default;\n\n// Convert pixels to ems\n//\n// @param {Number} $px - value to convert\n//\n// @example scss\n//  $font-size-in-ems: px2em(16px);\n//  p { font-size: px2em(16px); }\n//\n// @returns {Number}\n\n@function px2em($px) {\n  @if math.is-unitless($px) {\n    @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n    @return px2em($px * 1px);\n  }\n  // if $px is compatible with em units, then return value unchanged\n  @if math.compatible($px, 1em) {\n    @return $px;\n  }\n  @return math.div($px, 16px) * 1em;\n}\n\n// Get a breakpoint's width\n//\n// @param {String} $name - Name of the breakpoint. One of $breakpoints\n//\n// @example scss\n//  $tablet-width: get-breakpoint-width(tablet);\n//  @media (min-width: get-breakpoint-width(tablet)) {}\n//\n// @requires {Variable} $breakpoints\n//\n// @returns {Number} Value in pixels\n@function get-breakpoint-width($name, $breakpoints: $breakpoints) {\n  @if map.has-key($breakpoints, $name) {\n    @return map.get($breakpoints, $name);\n  } @else {\n    @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    @return null;\n  }\n}\n// Media Query mixin\n//\n// @param {String | Boolean} $from [false] - One of $breakpoints\n// @param {String | Boolean} $until [false] - One of $breakpoints\n// @param {String | Boolean} $and [false] - Additional media query parameters\n// @param {String} $media-type [$media-type] - Media type: screen, print…\n//\n// @ignore Undocumented API, for advanced use only:\n// @ignore @param {Map} $breakpoints [$breakpoints]\n//\n// @content styling rules, wrapped into a @media query when $responsive is true\n//\n// @requires {Variable} $media-type\n// @requires {Variable} $breakpoints\n// @requires {function} px2em\n// @requires {function} get-breakpoint-width\n//\n// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n//\n// @example scss\n//  @use 'path/to/mq' as *;\n//  .element {\n//    @include mq($from: mobile) {\n//      color: red;\n//    }\n//    @include mq($until: tablet) {\n//      color: blue;\n//    }\n//    @include mq(mobile, tablet) {\n//      color: green;\n//    }\n//    @include mq($from: tablet, $and: '(orientation: landscape)') {\n//      color: teal;\n//    }\n//    @include mq(950px) {\n//      color: hotpink;\n//    }\n//    @include mq(tablet, $media-type: screen) {\n//      color: hotpink;\n//    }\n//    // Advanced use:\n//    $my-breakpoints: (L: 900px, XL: 1200px);\n//    @include mq(L, $breakpoints: $my-breakpoints) {\n//      color: hotpink;\n//    }\n//  }\n@mixin mq(\n$from: false,\n$until: false,\n$and: false,\n$media-type: $media-type,\n$breakpoints: $breakpoints\n) {\n  $min-width: 0;\n  $max-width: 0;\n  $media-query: '';\n\n  // From: this breakpoint (inclusive)\n  @if $from {\n    @if type-of($from) == number {\n      $min-width: px2em($from);\n    } @else {\n      $min-width: px2em(get-breakpoint-width($from, $breakpoints));\n    }\n  }\n\n  // Until: that breakpoint (exclusive)\n  @if $until {\n    @if type-of($until) == number {\n      $max-width: px2em($until);\n    } @else {\n      $max-width: px2em(get-breakpoint-width($until, $breakpoints)) - 0.01em;\n    }\n  }\n\n  @if $min-width != 0 {\n    $media-query: '#{$media-query} and (min-width: #{$min-width})';\n  }\n  @if $max-width != 0 {\n    $media-query: '#{$media-query} and (max-width: #{$max-width})';\n  }\n  @if $and {\n    $media-query: '#{$media-query} and #{$and}';\n  }\n\n  // Remove unnecessary media query prefix 'all and '\n  @if ($media-type == 'all' and $media-query != '') {\n    $media-type: '';\n    $media-query: str-slice(unquote($media-query), 6);\n  }\n\n  @media #{$media-type + $media-query} {\n    @content;\n  }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _quick-sort($list) {\n  $less: ();\n  $equal: ();\n  $large: ();\n\n  @if length($list) > 1 {\n    $seed: list.nth($list, math.ceil(math.div(length($list), 2)));\n\n    @each $item in $list {\n      @if ($item == $seed) {\n        $equal: list.append($equal, $item);\n      } @else if ($item < $seed) {\n        $less: list.append($less, $item);\n      } @else if ($item > $seed) {\n        $large: list.append($large, $item);\n      }\n    }\n\n    @return join(join(_quick-sort($less), $equal), _quick-sort($large));\n  }\n\n  @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _map-sort-by-value($map) {\n  $map-sorted: ();\n  $map-keys: map.keys($map);\n  $map-values: map.values($map);\n  $map-values-sorted: _quick-sort($map-values);\n\n  // Reorder key/value pairs based on key values\n  @each $value in $map-values-sorted {\n    $index: index($map-values, $value);\n    $key: list.nth($map-keys, $index);\n    $map-sorted: map.merge(\n    $map-sorted,\n    (\n    $key: $value,\n    )\n    );\n\n    // Unset the value in $map-values to prevent the loop\n    // from finding the same index twice\n    $map-values: list.set-nth($map-values, $index, 0);\n  }\n\n  @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $breakpoints\n///\n/// @example scss\n///  @include add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin add-breakpoint($name, $width) {\n  $new-breakpoint: (\n  $name: $width,\n  );\n  $breakpoints: map.merge($breakpoints, $new-breakpoint) !global;\n  $breakpoints: _map-sort-by-value($breakpoints) !global;\n}\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints [$show-breakpoints] - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints [$breakpoints] - Breakpoint names and sizes\n///\n/// @requires {Variable} $breakpoints\n/// @requires {Variable} $show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n\n\n","@mixin show-breakpoints(\n  $show-breakpoints: $show-breakpoints,\n  $breakpoints: $breakpoints\n  ) {\n    .server-local body:before {\n      // Loop through the breakpoints that should be shown\n      @each $show-breakpoint in $show-breakpoints {\n        $width: get-breakpoint-width($show-breakpoint, $breakpoints);\n        @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n          content: \"#{$show-breakpoint} ≥ #{$width} (#{px2em($width)})\";\n          color: #b5b9c9;\n          font-size: .65rem;\n          line-height: 1;\n          font-family: inherit;\n          padding: 2px;\n          pointer-events: none;\n          position: fixed;\n          top: 0;\n          right: 0;\n          z-index: 1001;\n        }\n      }\n    }\n  }\n\n@if length($show-breakpoints) > 0 {\n    @include show-breakpoints;\n}\n","@import\n// \"components/settings\",\n// \"components/color-vars\";\n\"components/mq\",\n\"components/mq-show-breakpoints\";\n\n.server-local.theme-dark body::before {\n  color: #606885;\n}\n// .server-local .site:before {\n// .server-local body:before {\n//   color: #ccc;\n//   font-size: .65rem;\n//   line-height: 1;\n//   font-family: inherit;\n//   padding: 2px;\n//   pointer-events: none;\n//   position: fixed;\n//   top: 0;\n//   right: 0;\n//   z-index: 1001;\n// }\n\n// .server-local body:before {\n//   right: 0;\n// }\n//\n// .server-local .site:before {\n//   left: .25rem;\n//   @media (min-aspect-ratio: 16/16) {\n//     content: \"min-aspect-ratio 16:16 = 1:1\";\n//   }\n//   @media (min-aspect-ratio: 16/12) {\n//     content: \"min-aspect-ratio 16:12 = 4:3\";\n//   }\n//   @media (min-aspect-ratio: 16/10) {\n//     content: \"min-aspect-ratio 16:10 = 8:5\";\n//   }\n//   @media (min-aspect-ratio: 16/9) {\n//     content: \"min-aspect-ratio 16:9\";\n//   }\n//   @media (min-aspect-ratio: 2/1) {\n//     content: \"min-aspect-ratio 16:8 = 2:1\";\n//   }\n// }\n"]}